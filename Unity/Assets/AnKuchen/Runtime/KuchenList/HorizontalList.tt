<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Core" #>
using System;
using System.Linq;
using System.Collections.Generic;
using AnKuchen.AdditionalInfo;
using AnKuchen.Extensions;
using AnKuchen.Map;
using UnityEngine;
using UnityEngine.UI;
using Object = UnityEngine.Object;

namespace AnKuchen.KuchenList
{
<# for (var t = 1; t <= 4; ++t) { #>
    public class HorizontalList<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>>
        <#= string.Join(" ", Enumerable.Range(1, t).Select(i => $"where T{i} : IMappedObject, new()")) #>
    {
        private readonly ScrollRect scrollRect;
<# for (var i = 1; i <= t; ++i) { #>
        private readonly T<#= i #> original<#= i #>;
<# } #>
        private List<UIFactory<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>>> contents = new List<UIFactory<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>>>();
        private readonly List<float> contentPositions = new List<float>();
        private readonly Dictionary<int, IMappedObject> createdObjects = new Dictionary<int, IMappedObject>();
        private readonly Dictionary<Type, List<IMappedObject>> cachedObjects = new Dictionary<Type, List<IMappedObject>>();
        private readonly RectTransform viewportRectTransformCache;
        private readonly ListAdditionalInfo additionalInfo;
        public float Spacing { get; private set; }
        public int SpareElement { get; private set; }

        private Margin margin = new Margin();
        public IReadonlyMargin Margin => margin;

        public HorizontalList(ScrollRect scrollRect, <#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i} original{i}")) #>)
        {
            this.scrollRect = scrollRect;

<# for (var i = 1; i <= t; ++i) { #>
            this.original<#= i #> = original<#= i #>;
            this.original<#= i #>.Mapper.Get().SetActive(false);
            cachedObjects.Add(typeof(T<#= i #>), new List<IMappedObject>());

<# } #>
            var kuchenList = this.scrollRect.gameObject.AddComponent<KuchenList>();
            kuchenList.List = new ListOperator(this);

            var viewport = scrollRect.viewport;
            viewportRectTransformCache = viewport != null ? viewport : scrollRect.GetComponent<RectTransform>();

            additionalInfo = scrollRect.GetComponent<ListAdditionalInfo>();

            var horizontalLayoutGroup = scrollRect.content.GetComponent<HorizontalLayoutGroup>();
            if (horizontalLayoutGroup != null)
            {
                horizontalLayoutGroup.enabled = false;
                Spacing = horizontalLayoutGroup.spacing;
                margin = new Margin
                {
                    Left = horizontalLayoutGroup.padding.left,
                    Right = horizontalLayoutGroup.padding.right
                };
            }

            var contentSizeFitter = scrollRect.content.GetComponent<ContentSizeFitter>();
            if (contentSizeFitter != null)
            {
                contentSizeFitter.enabled = false;
            }
        }

        private class ListOperator : IKuchenListMonoBehaviourBridge
        {
            private readonly HorizontalList<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>> list;

            public ListOperator(HorizontalList<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>> list)
            {
                this.list = list;
            }

            public void DeactivateAll()
            {
                list.DeactivateAll();
            }

            public void UpdateView()
            {
                list.UpdateView();
            }
        }

        private void DeactivateAll()
        {
            foreach (var item in createdObjects.Values)
            {
                if (item is IReusableMappedObject reusable) reusable.Deactivate();
            }
            createdObjects.Clear();
        }

        private void UpdateView()
        {
            var displayRect = viewportRectTransformCache.rect;
            var contentRect = RectTransformUtility.CalculateRelativeRectTransformBounds(viewportRectTransformCache, scrollRect.content);
            var start = contentRect.max.x - displayRect.max.x;
            var displayRectWidth = displayRect.width;
            var end = start + displayRectWidth;

            var tmpEnd = contentRect.size.x - start;
            var tmpStart = contentRect.size.x - end;
            start = tmpStart;
            end = tmpEnd;

            var displayMinIndex = int.MaxValue;
            var displayMaxIndex = int.MinValue;
            for (var i = 0; i < contentPositions.Count; ++i)
            {
                if (start > contentPositions[i]) continue;
                if (contentPositions[i] > end) break;
                displayMinIndex = Mathf.Min(displayMinIndex, i);
                displayMaxIndex = Mathf.Max(displayMaxIndex, i);
            }

            if (displayMinIndex == int.MaxValue)
            {
                displayMinIndex = contentPositions.Count - 1;
                displayMaxIndex = contentPositions.Count - 1;
            }

            displayMinIndex = Mathf.Max(displayMinIndex - 1 - SpareElement, 0);
            displayMaxIndex = Mathf.Min(displayMaxIndex + SpareElement, contents.Count - 1);

            var removedList = new List<int>();
            foreach (var tmp in createdObjects)
            {
                var index = tmp.Key;
                var map = tmp.Value;
                if (displayMinIndex <= index && index <= displayMaxIndex) continue;

                CollectObject(map);
                removedList.Add(index);
            }

            foreach (var removed in removedList)
            {
                createdObjects.Remove(removed);
            }

            for (var i = displayMinIndex; i <= displayMaxIndex; ++i)
            {
                if (createdObjects.ContainsKey(i)) continue;

                RectTransform newObject = null;
                IMappedObject newMappedObject = null;
                var content = contents[i];
<# for (var i = 1; i <= t; ++i) { #>
                if (content.Callback<#= i #> != null) (newObject, newMappedObject) = GetOrCreateNewObject(original<#= i #>, content.Callback<#= i #>, contentPositions[i]);
<# } #>
                if (content.Spacer != null) continue;
                if (newObject == null) throw new Exception($"newObject == null");
                createdObjects[i] = newMappedObject;
            }
        }

        private void UpdateListContents()
        {
            // clear elements
            foreach (var map in createdObjects.Values)
            {
                CollectObject(map);
            }
            createdObjects.Clear();
            contentPositions.Clear();

            // create elements
            var calcPosition = Margin.Left;
            var prevElementName = "";
            var elementName = "";
            var specialSpacings = (additionalInfo != null && additionalInfo.specialSpacings != null)
                ? additionalInfo.specialSpacings
                : new SpecialSpacing[] { };
            for (var i = 0; i < contents.Count; ++i)
            {
                var content = contents[i];
                var elementSize = 0f;

<# for (var i = 1; i <= t; ++i) { #>
                if (content.Callback<#= i #> != null)
                {
                    elementName = original<#= i #>.Mapper.Get().name;
                    elementSize = original<#= i #>.Mapper.Get<RectTransform>().rect.width;
                }
<# } #>
                if (content.Spacer != null)
                {
                    elementName = "";
                    elementSize = content.Spacer.Size;
                }

                float? spacing = null;
                var specialSpacing = specialSpacings.FirstOrDefault(x => x.item1 == prevElementName && x.item2 == elementName);
                if (specialSpacing != null) spacing = specialSpacing.spacing;
                if (spacing == null && i != 0) spacing = Spacing;

                calcPosition += spacing ?? 0f;
                contentPositions.Add(calcPosition);
                calcPosition += elementSize;

                prevElementName = elementName;
            }
            calcPosition += Margin.Right;

            // calc content size
            var c = scrollRect.content;
            var s = c.sizeDelta;
            c.sizeDelta = new Vector2(calcPosition, s.y);
        }

        private void CollectObject(IMappedObject target)
        {
            if (target is IReusableMappedObject reusable) reusable.Deactivate();
            target.Mapper.Get().SetActive(false);

<# for (var i = 1; i <= t; ++i) { #>
            if (target is T<#= i #>) cachedObjects[typeof(T<#= i #>)].Add(target);
<# } #>
        }

        private (RectTransform, IMappedObject) GetOrCreateNewObject<T>(T original, Action<T> contentCallback, float position) where T : IMappedObject, new()
        {
            var cache = cachedObjects[typeof(T)];
            T newObject;
            if (cache.Count > 0)
            {
                newObject = (T) cache[0];
                cache.RemoveAt(0);
            }
            else
            {
                newObject = original.Duplicate();
            }

            var newRectTransform = newObject.Mapper.Get<RectTransform>();
            newRectTransform.SetParent(scrollRect.content);
            newObject.Mapper.Get().SetActive(true);

            var p = newRectTransform.anchoredPosition;
            var r = newRectTransform.rect;
            newRectTransform.anchoredPosition = new Vector3((scrollRect.content.sizeDelta.x / -2f) + position + r.width / 2f, p.y, 0f);

            if (newObject is IReusableMappedObject reusable) reusable.Activate();
            contentCallback(newObject);

            return (newRectTransform, newObject);
        }

        public ListContentEditor Edit()
        {
            return new ListContentEditor(this);
        }

        public class ListContentEditor : IDisposable
        {
            private readonly HorizontalList<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>> parent;
            public List<UIFactory<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>>> Contents { get; set; }
            public float Spacing { get; set; }
            public Margin Margin { get; set; }
            public int SpareElement { get; set; }

            public ListContentEditor(HorizontalList<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>> parent)
            {
                this.parent = parent;
                Contents = parent.contents;
                Spacing = parent.Spacing;
                Margin = parent.margin;
                SpareElement = parent.SpareElement;
            }

            public void Dispose()
            {
                parent.contents = Contents;
                parent.Spacing = Spacing;
                parent.margin = Margin;
                parent.SpareElement = SpareElement;
                parent.UpdateListContents();
            }
        }

        public void DestroyCachedGameObjects()
        {
            foreach (var cachedObject in cachedObjects)
            {
                foreach (var go in cachedObject.Value)
                {
                    Object.Destroy(go.Mapper.Get());
                }
                cachedObject.Value.Clear();
            }
        }
    }

<# } #>
}